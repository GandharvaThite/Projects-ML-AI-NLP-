#include <bits/stdc++.h>
#include <iostream>
using namespace std;

bool move_up(int n,int row, int col,vector<vector<int>>&v){
    if(row!=0 && v[row-1][col]!=2){
        row--;
        return true;
    }
    return false;
}
bool move_right(int n,int row, int col,vector<vector<int>>&v){
    if(col!=n-1 && v[row][col+1]!=2){
        col++;
        return true;
    }
    return false;
}

bool agent(int n, int row, int col, vector<vector<int>>&v,vector<vector<int>>&b){
    if(b[row][col]==9){
        cout<<"Reached"<<endl;
        return true;
    }
    int r = col+1;
    int u = row-1;
    int l = col-1;
    int d = row+1;
    if(b[row][r]!=2||b[row][r]!=5){
        if(b[row][r]==0){
            if(b[row][r+1]==9){
                v[row][r+1]=1;
                b[row][col] = 9;
            }
            else{
                v[row-1][col+1] = 1;
                v[row][col] = 1;
                if(agent(n,row-1,col+1,v,b)==true) {
                    return true;
                    
                };
                v[row][col] = 0;
            }
        }
        if(b[row][r]==3 || b[row][r]==4){
            move_right(n,row,col,v);
            if(col+2<=3){
                if(v[row][col+2]==0){
                    v[row][col+2] = 2;
                    
                }
                else if(v[row][col+2]==2){
                    v[row][col+2] = 7;
                   
                }
            }
            if(row-1>=0 && col+1<=3){
                if(v[row-1][col+1]==0){
                    v[row-1][col+1] = 2;
                }
                else if(v[row-1][col+1]==2){
                    v[row-1][col+1] = 7;
                    
                }
            }
            
            if(v[row][col]==0){
                v[row][col] = 2;
            }
            else if(v[row][col]==2){
                v[row][col] = 7;
            }
            if(row+1<=3 && col+1<=3){
                if(v[row+1][col+1]==0){
                    v[row+1][col+1] = 2;
                }
                else if(v[row+1][col+1]==2){
                    v[row+1][col+1] = 7;
                }
                v[row][r] = 0;
                if(agent(n,row,col+1,v,b)==true) {
                    return true;
                    
                }
                v[row][r] = 1;
            }
            
            
        }
        
        
        
    }
    if(b[u][col]!=2||b[u][col]!=5){
        if(b[u][col]==0){
            if(b[u-1][col]==9){
                v[u-1][col]=1;
                b[u-1][col]=9;
            }
            else{
                v[row+1][col+1] = 1;
                v[row][col] = 1;
                if(agent(n,row+1,col+1,v,b)) {
                    return true;
                    
                };
                v[row][col] = 0;
            }
        }
        if(b[u][col]==3 || b[u][col]==4 ){
          move_up(n,row,col,v);
          if(row-2>=0){
              if(v[row-2][col]==0){
                  v[row-2][col] = 2;
              }
              else if(v[row-2][col]==2){
                  v[row-2][col] = 7;
               
              }
          }
          if(col-1>=0 && row-1>=0){
              if(v[row-1][col-1]==0){
                  v[row-1][col-1] = 2;
              }
              else if(v[row-1][col-1]==2){
                  v[row-1][col-1] = 7;
              }
          }
          if(v[row][col]==0){
                v[row][col] = 2;
            }
            else if(v[row][col]==2){
                v[row][col] = 7;
            }
            if(row-1>=0 && col+1<=n-1){
                if(v[row-1][col+1]==0){
                    v[row-1][col+1] = 2;
                }
                else if(v[row-1][col+1]==2){
                    v[row-1][col+1] = 7;
                }
            }
        v[u][col]= 0;
        if(agent(n,row-1,col,v,b)==true) {
            return true;
        };
        v[u][col]=1;
        }
        
    }
    
    return false;
}
int main()
{
    vector<vector<int>>board(4,vector<int>(4,0));
    vector<vector<int>>road(4,vector<int>(4,0));
    board[1][0] = 2; //Demon
    board[1][1] = 9; //Gold
    board[3][2] = 5; //Pit
    board[0][3] = 5; //Pit
    board[1][2] = 5; //Pit
    board[0][2] = 3; //Breeze
    board[1][3] = 3; //Breeze
    board[2][2] = 3; //Breeze
    board[3][1] = 3; //Breeze
    board[3][3] = 3; //Breeze
    board[0][0] = 4; //Stink
    board[2][0] = 4; //Stink
    for(auto i:board){
        for(auto j: i){
            cout<<j<<" ";
        }
        cout<<endl;
    }
    cout<<"------------------"<<endl;
    road[3][0] = 1;
    agent(4,3,0,road,board);
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            if(road[i][j]==7 || road[i][j]==1){
                road[i][j] = 1;
            }
            else{
                road[i][j] = 0;
            }
        }
    }
    for(auto i:road){
        for(auto j:i){
            cout<<j<<" ";
        }
        cout<<endl;
    }
    
    return 0;
}

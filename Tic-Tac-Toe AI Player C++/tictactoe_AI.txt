#include <bits/stdc++.h>
#include <iostream>
using namespace std;

bool x_wins(vector<vector<char>>&board){
    if(board[0][0]=='X'&&board[0][1]=='X'&&board[0][2]=='X') return true;
    if(board[1][0]=='X'&&board[1][1]=='X'&&board[1][2]=='X') return true;
    if(board[2][0]=='X'&&board[2][1]=='X'&&board[2][2]=='X') return true;
    
    if(board[0][0]=='X'&&board[1][0]=='X'&&board[2][0]=='X') return true;
    if(board[0][1]=='X'&&board[1][1]=='X'&&board[2][1]=='X') return true;
    if(board[0][2]=='X'&&board[1][2]=='X'&&board[2][2]=='X') return true;
    
    if(board[0][0]=='X'&&board[1][1]=='X'&&board[2][2]=='X') return true;
    if(board[0][2]=='X'&&board[1][1]=='X'&&board[2][0]=='X') return true;
    return false;
}
bool o_wins(vector<vector<char>>&board){
    if(board[0][0]=='O'&&board[0][1]=='O'&&board[0][2]=='O') return true;
    if(board[1][0]=='O'&&board[1][1]=='O'&&board[1][2]=='O') return true;
    if(board[2][0]=='O'&&board[2][1]=='O'&&board[2][2]=='O') return true;
    
    if(board[0][0]=='O'&&board[1][0]=='O'&&board[2][0]=='O') return true;
    if(board[0][1]=='O'&&board[1][1]=='O'&&board[2][1]=='O') return true;
    if(board[0][2]=='O'&&board[1][2]=='O'&&board[2][2]=='O') return true;
    
    if(board[0][0]=='O'&&board[1][1]=='O'&&board[2][2]=='O') return true;
    if(board[0][2]=='O'&&board[1][1]=='O'&&board[2][0]=='O') return true;
    return false;
}
bool x_near(vector<vector<char>>&board,vector<int>&cor){
    for(int i=0;i<3;i++){
        for(int j=0;j<1;j++){
            if(board[i][j]=='X'&&board[i][j+1]=='X'&&board[i][j+2]=='.'){
                cor.push_back(i);
                cor.push_back(j+2);
                return true;
            }
            if(board[i][j]=='X'&&board[i][j+1]=='.'&&board[i][j+2]=='X'){
                cor.push_back(i);
                cor.push_back(j+1);
                return true;
            }
            if(board[j][i]=='X'&&board[j+1][i]=='X'&&board[j+2][i]=='.'){
                cor.push_back(j+2);
                cor.push_back(i);
                return true;
            }
            if(board[j][i]=='X'&&board[j+1][i]=='.'&&board[j+2][i]=='X'){
                cor.push_back(j+1);
                cor.push_back(i);
                return true;
            }
        }
        for(int j=1;j<2;j++){
            if(board[i][j]=='X'&&board[i][j+1]=='X'&&board[i][j-1]=='.'){
                cor.push_back(i);
                cor.push_back(j-1);
                return true;
            }
            if(board[j][i]=='X'&&board[j+1][i]=='X'&&board[j-1][i]=='.'){
                cor.push_back(j-1);
                cor.push_back(i);
                return true;
            }
        }
    }
    if(board[0][0]=='X'&&board[2][2]=='X'&&board[1][1]=='.'){
        cor.push_back(1);
        cor.push_back(1);
        return true;
    }
    if(board[0][2]=='X'&&board[2][0]=='X'&&board[1][1]=='.'){
        cor.push_back(1);
        cor.push_back(1);
        return true;
    }
    if(board[0][0]=='X' &&board[1][1]=='X'&&board[2][2]=='.'){
        cor.push_back(2);
        cor.push_back(2);
        return true;
    }
    if(board[1][1]=='X' &&board[2][2]=='X'&&board[0][0]=='.'){
        cor.push_back(0);
        cor.push_back(0);
        return true;
    }
    if(board[0][2]=='X' &&board[1][1]=='X'&&board[2][0]=='.'){
        cor.push_back(2);
        cor.push_back(0);
        return true;
    }
    if(board[1][1]=='X' &&board[2][0]=='X'&&board[0][2]=='.'){
        cor.push_back(0);
        cor.push_back(2);
        return true;
    }
    
    return false;
}
bool o_near(vector<vector<char>>&board,vector<int>&cor){
    for(int i=0;i<3;i++){
        for(int j=0;j<1;j++){
            if(board[i][j]=='O'&&board[i][j+1]=='O'&&board[i][j+2]=='.'){
                cor.push_back(i);
                cor.push_back(j+2);
                return true;
            }
            if(board[i][j]=='O'&&board[i][j+1]=='.'&&board[i][j+2]=='O'){
                cor.push_back(i);
                cor.push_back(j+1);
                return true;
            }
            if(board[j][i]=='O'&&board[j+1][i]=='O'&&board[j+2][i]=='.'){
                cor.push_back(j+2);
                cor.push_back(i);
                return true;
            }
            if(board[j][i]=='O'&&board[j+1][i]=='.'&&board[j+2][i]=='O'){
                cor.push_back(j+1);
                cor.push_back(i);
                return true;
            }
        }
        for(int j=1;j<2;j++){
            if(board[i][j]=='O'&&board[i][j+1]=='O'&&board[i][j-1]=='.'){
                cor.push_back(i);
                cor.push_back(j-1);
                return true;
            }
            if(board[j][i]=='O'&&board[j+1][i]=='O'&&board[j-1][i]=='.'){
                cor.push_back(j-1);
                cor.push_back(i);
                return true;
            }
        }
    }
    if(board[0][0]=='O'&&board[2][2]=='O'&&board[1][1]=='.'){
        cor.push_back(1);
        cor.push_back(1);
        return true;
    }
    if(board[0][2]=='O'&&board[2][0]=='O'&&board[1][1]=='.'){
        cor.push_back(1);
        cor.push_back(1);
        return true;
    }
    if(board[0][0]=='O' &&board[1][1]=='O'&&board[2][2]=='.'){
        cor.push_back(2);
        cor.push_back(2);
        return true;
    }
    if(board[1][1]=='O' &&board[2][2]=='O'&&board[0][0]=='.'){
        cor.push_back(0);
        cor.push_back(0);
        return true;
    }
    if(board[0][2]=='O' &&board[1][1]=='O'&&board[2][0]=='.'){
        cor.push_back(2);
        cor.push_back(0);
        return true;
    }
    if(board[1][1]=='O' &&board[2][0]=='O'&&board[0][2]=='.'){
        cor.push_back(0);
        cor.push_back(2);
        return true;
    }
    
    return false;
}
void comp(vector<vector<char>>&board){
    vector<vector<int>>visited(3,vector<int>(3,-1));
    int empty = 0;
    vector<int>score;
    vector<int>x;
    vector<int>y;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[i][j]=='.'){
                visited[i][j] = 0;
                empty++;
            }
            else{
                visited[i][j] = 1;
            }
        }
    }
    vector<int>cor_o;
    vector<int>cor_x;
    bool O_placed = false;
    if(o_near(board,cor_o) && !O_placed){
        score.push_back(1);
        board[cor_o[0]][cor_o[1]]='O';
        O_placed = true;
    }
    else if(x_near(board,cor_x)&&!O_placed){
        score.push_back(-1);
        board[cor_x[0]][cor_x[1]] = 'O';
    }
    else if(!O_placed){
       if(empty<8){
          score.push_back(0);
          bool placed = false;
          for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board[i][j]=='.'){
                    vector<int>some_cor;
                    board[i][j]='O';
                    if(o_near(board,some_cor)){
                        board[i][j]='O';
                        placed = true;
                        break;
                    }
                    else board[i][j] = '.';
                }
            }
            if(placed){
                break;
            }
        } 
       }
       else{
           if(board[1][1]=='X') board[0][0] = 'O';
           else board[1][1] = 'O';
       }
    }
}
void player(int a, int b,vector<vector<char>>&board){
    board[a][b] = 'X';
}
void display(vector<vector<char>>&board){
    for(auto i:board){
        for(auto j:i){
            cout<<j<<" ";
        }
        cout<<endl;
    }
    cout<<"----------------------"<<endl;
}
bool draw(vector<vector<char>>&board){
    int cnt = 0;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[i][j]=='.') cnt++;
        }
    }
    if(cnt>0) return false;
    return true;
}
int main()
{
    vector<vector<char>>board = {
        {'.','.','.'},
        {'.','.','.'},
        {'.','.','.'}
    };
    bool break_cond = false;
    while(!break_cond){
        display(board);
        int a, b;
        cout<<"Enter co-ordinates: ";
        cin>>a>>b;
        player(a,b,board);
        comp(board);
        if(x_wins(board)){
            display(board);
            cout<<"Player wins!!"<<endl;
            break_cond = true;
        }
        else if(o_wins(board)){
            display(board);
            cout<<"Computer wins!!"<<endl;
            break_cond = true;
        }
        else if(draw(board)){
            display(board);
            cout<<"It's a draw game"<<endl;
            break_cond = true;
        }
    }
    return 0;
}
